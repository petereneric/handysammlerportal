{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../../../services/conn-api/conn-api.service\";\nimport * as i2 from \"@ionic/angular\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"../../../../../services/data/data.service\";\nexport let AddPage = /*#__PURE__*/(() => {\n  class AddPage {\n    constructor(connApi, alertController, router, dataService) {\n      this.connApi = connApi;\n      this.alertController = alertController;\n      this.router = router;\n      this.dataService = dataService;\n      // Urls\n      this.urlOrdersAvailable = 'collector/order/available';\n      this.urlOrder = 'collector/order';\n      this.boxChoice = [0];\n      this.bricolageChoice = [0];\n      this.flyerChoice = [0];\n      this.posterChoice = [0];\n      this.boxOrder = 0;\n      this.bricolageOrder = 0;\n      this.flyerOrder = 0;\n      this.posterOrder = 0;\n      this.orderDisabled = false;\n      this.orderTaken = false;\n      this.spinner = false;\n      this.flyerSelected = false;\n      this.posterSelected = false;\n      this.bOrderSplit = false;\n      this.bOrderMerge = false;\n    }\n    ngOnInit() {\n      this.available();\n      this.dataService.callbackLocation().subscribe(data => {\n        this.available();\n      });\n      this.dataService.callbackOrder().subscribe(data => {\n        this.available();\n      });\n    }\n    onOrder() {\n      if (this.boxAvailable == 0 && this.bricolageAvailable == 0 && this.flyerAvailable == 0 && this.posterAvailable == 0) {\n        this.dialogLimitReached();\n        return;\n      }\n      if (this.boxOrder == 0 && this.bricolageOrder == 0 && this.flyerOrder == 0 && this.posterOrder == 0) {\n        this.dialogNoOrders();\n        return;\n      }\n      this.orderDisabled = true;\n      this.spinner = true;\n      let json = {\n        'box': this.boxOrder,\n        'bricolage': this.bricolageOrder,\n        'flyer': this.flyerOrder,\n        'poster': this.posterOrder\n      };\n      this.connApi.safePut(this.urlOrder, json).subscribe(data => {\n        if (data.status == 200) {\n          console.log('Order added');\n          // data\n          let body = data.body;\n          this.bOrderSplit = body.bSplit == 1;\n          this.bOrderMerge = body.bMerge == 1;\n          console.log('merge' + this.bOrderMerge);\n          console.log('split' + this.bOrderSplit);\n          this.available();\n          this.dataService.publishData(null);\n          (() => __awaiter(this, void 0, void 0, function* () {\n            this.orderTaken = true;\n            yield new Promise(resolve => setTimeout(resolve, 2000));\n            this.spinner = false;\n            this.orderDisabled = false;\n          }))();\n        }\n      });\n    }\n    onChangedBoxOrder() {\n      this.flyerOrder = this.boxOrder * 100 <= this.flyerAvailable ? this.boxOrder * 100 : this.flyerAvailable;\n      this.posterOrder = this.boxOrder * 2 <= this.posterAvailable ? this.boxOrder * 2 : this.posterAvailable;\n    }\n    onChangedBricolageOrder() {\n      this.flyerOrder = this.bricolageOrder * 100 <= this.flyerAvailable ? this.bricolageOrder * 100 : this.flyerAvailable;\n      this.posterOrder = this.bricolageOrder * 2 <= this.posterAvailable ? this.bricolageOrder * 2 : this.posterAvailable;\n    }\n    onChangedFlyerOrder() {\n      if (!this.flyerSelected) {\n        this.flyerSelected = true;\n      }\n    }\n    onChangedPosterOrder() {\n      console.log('jo');\n      if (!this.posterSelected) {\n        this.posterSelected = true;\n      }\n    }\n    // Dialogs\n    dialogLimitReached() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const alert = yield this.alertController.create({\n          header: 'Bestell-Limit erreicht',\n          message: 'Leider hast Du Dein Bestell-Limit erreicht. Weitere Bestellungen sind nächstes Jahr wieder möglich!',\n          cssClass: 'my-alert',\n          buttons: ['Ok']\n        });\n        yield alert.present();\n      });\n    }\n    dialogNoOrders() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const alert = yield this.alertController.create({\n          header: 'Keine Bestellung ausgewählt',\n          message: 'Bitte wähle deine Bestellung aus. Klicke dazu auf die jeweiligen Schaltflächen.',\n          buttons: ['Ok']\n        });\n        yield alert.present();\n      });\n    }\n    compare(c1, c2) {\n      return c1 == c2;\n    }\n    onClickPageInformation() {\n      this.router.navigate(['collector/order/history']);\n      this.boxChoice = [];\n      this.bricolageChoice = [];\n      this.flyerChoice = [];\n      this.posterChoice = [];\n      this.boxOrder = 0;\n      this.bricolageOrder = 0;\n      this.flyerOrder = 0;\n      this.posterOrder = 0;\n      this.orderDisabled = false;\n      this.orderTaken = false;\n      this.flyerSelected = false;\n      this.posterSelected = false;\n      this.available();\n    }\n    available() {\n      this.connApi.safeGet(this.urlOrdersAvailable).subscribe(response => {\n        console.log(response.body);\n        this.data = response.body;\n        this.oBox = this.data.oBox;\n        this.oBricolage = this.data.oBricolage;\n        // Box\n        this.boxChoice = [0];\n        if (this.oBox.bAvailable == 1) {\n          this.oBox.maxOrder = Math.floor(+this.data.nLocations + this.data.nDevices / this.data.intervallDevices - this.oBox.nOrder - this.oBricolage.nOrder);\n          this.oBox.maxOrder = 6; // no limit\n          console.log(this.oBox.maxOrder);\n          if (this.oBox.maxOrder > 0) {\n            for (var i = 1; i <= this.oBox.maxOrder && i <= 6; i++) {\n              this.boxChoice.push(i);\n            }\n          }\n        } else {\n          this.oBox.maxOrder = 0;\n        }\n        // Bricolage\n        this.bricolageChoice = [0];\n        if (this.oBricolage.bAvailable == 1) {\n          this.oBricolage.maxOrder = Math.floor(+this.data.nLocations + this.data.nDevices / this.data.intervallDevices - this.oBricolage.nOrder - this.oBox.nOrder);\n          this.oBricolage.maxOrder = 6;\n          if (this.oBricolage.maxOrder > 0) {\n            for (var i = 1; i <= this.oBricolage.maxOrder && i <= 6; i++) {\n              this.bricolageChoice.push(i);\n            }\n          }\n        } else {\n          this.oBricolage.maxOrder = 0;\n        }\n        // Flyer\n        this.flyerChoice = [0];\n        this.flyerAvailable = 600;\n        if (this.flyerAvailable > 0) {\n          for (var i = 100; i <= this.flyerAvailable; i += 100) {\n            this.flyerChoice.push(i);\n          }\n        }\n        // Poster\n        this.posterChoice = [0];\n        this.posterAvailable = 12;\n        if (this.posterAvailable > 0) {\n          for (var i = 2; i <= this.posterAvailable; i += 2) {\n            this.posterChoice.push(i);\n          }\n        }\n      });\n    }\n    getRestIntervall() {\n      if (this.data != null) {\n        return Math.floor(this.data.nDevices % this.data.intervallDevices) == 0 ? 200 : 200 - Math.floor(this.data.nDevices % this.data.intervallDevices);\n      }\n    }\n    onLocation() {\n      this.router.navigate(['collector/menu/data/tabs/locations']);\n    }\n    onNextOrder() {\n      this.boxOrder = 0;\n      this.bricolageOrder = 0;\n      this.flyerOrder = 0;\n      this.posterOrder = 0;\n      this.orderTaken = false;\n    }\n  }\n  AddPage.ɵfac = function AddPage_Factory(t) {\n    return new (t || AddPage)(i0.ɵɵdirectiveInject(i1.ConnApiService), i0.ɵɵdirectiveInject(i2.AlertController), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.DataService));\n  };\n  AddPage.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AddPage,\n    selectors: [[\"app-add\"]],\n    decls: 3,\n    vars: 0,\n    consts: [[1, \"input-background\"], [1, \"text-head\"]],\n    template: function AddPage_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-content\", 0)(1, \"p\", 1);\n        i0.ɵɵtext(2, \"Leider k\\u00F6nnen wir aktuell keine weiteren Bestellungen annehmen und m\\u00FCssen diese Funktion daher deaktivieren. Wir bitten um euer Verst\\u00E4ndis. Eric & Till \");\n        i0.ɵɵelementEnd()();\n      }\n    },\n    dependencies: [i2.IonContent],\n    styles: [\"ion-select[_ngcontent-%COMP%]{okText:\\\"OKAY\\\"}.ion-select-option[_ngcontent-%COMP%]   .alert-wrapper[_ngcontent-%COMP%]{justify-content:center!important;text-align:center}.ion-select-option[_ngcontent-%COMP%]   .alert-wrapper[_ngcontent-%COMP%]   .alert-button-group[_ngcontent-%COMP%]{justify-content:center}.my-custom-interface[_ngcontent-%COMP%]   .select-interface-option[_ngcontent-%COMP%]{--color: #79193b}\"]\n  });\n  return AddPage;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}