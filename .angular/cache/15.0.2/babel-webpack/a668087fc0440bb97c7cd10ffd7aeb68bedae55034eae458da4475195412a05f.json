{"ast":null,"code":"import { C as CSS, p as plt, w as win, a as promiseResolve, d as doc, N as NAMESPACE } from './index-92848855.js';\nimport { a as appGlobalScript } from './ionic-global-23e7365a.js';\n\n/*\n Stencil Client Patch v1.17.3 | MIT Licensed | https://stenciljs.com\n */\nconst noop = () => {\n  /* noop*/\n};\nconst IS_DENO_ENV = typeof Deno !== 'undefined';\nconst IS_NODE_ENV = !IS_DENO_ENV && typeof global !== 'undefined' && typeof require === 'function' && !!global.process && typeof __filename === 'string' && (!global.origin || typeof global.origin !== 'string');\nconst IS_DENO_WINDOWS_ENV = IS_DENO_ENV && Deno.build.os === 'windows';\nconst getCurrentDirectory = IS_NODE_ENV ? process.cwd : IS_DENO_ENV ? Deno.cwd : () => '/';\nconst exit = IS_NODE_ENV ? process.exit : IS_DENO_ENV ? Deno.exit : noop;\nconst getDynamicImportFunction = namespace => `__sc_import_${namespace.replace(/\\s|-/g, '_')}`;\nconst patchEsm = () => {\n  // NOTE!! This fn cannot use async/await!\n  // @ts-ignore\n  if (!(CSS && CSS.supports && CSS.supports('color', 'var(--c)'))) {\n    // @ts-ignore\n    return import( /* webpackChunkName: \"polyfills-css-shim\" */'./css-shim-a659079f.js').then(() => {\n      if (plt.$cssShim$ = win.__cssshim) {\n        return plt.$cssShim$.i();\n      } else {\n        // for better minification\n        return 0;\n      }\n    });\n  }\n  return promiseResolve();\n};\nconst patchBrowser = () => {\n  {\n    // shim css vars\n    plt.$cssShim$ = win.__cssshim;\n  }\n  // @ts-ignore\n  const scriptElm = Array.from(doc.querySelectorAll('script')).find(s => new RegExp(`\\/${NAMESPACE}(\\\\.esm)?\\\\.js($|\\\\?|#)`).test(s.src) || s.getAttribute('data-stencil-namespace') === NAMESPACE);\n  const opts = scriptElm['data-opts'] || {};\n  if ('onbeforeload' in scriptElm && !history.scrollRestoration /* IS_ESM_BUILD */) {\n    // Safari < v11 support: This IF is true if it's Safari below v11.\n    // This fn cannot use async/await since Safari didn't support it until v11,\n    // however, Safari 10 did support modules. Safari 10 also didn't support \"nomodule\",\n    // so both the ESM file and nomodule file would get downloaded. Only Safari\n    // has 'onbeforeload' in the script, and \"history.scrollRestoration\" was added\n    // to Safari in v11. Return a noop then() so the async/await ESM code doesn't continue.\n    // IS_ESM_BUILD is replaced at build time so this check doesn't happen in systemjs builds.\n    return {\n      then() {\n        /* promise noop */\n      }\n    };\n  }\n  {\n    opts.resourcesUrl = new URL('.', new URL(scriptElm.getAttribute('data-resources-url') || scriptElm.src, win.location.href)).href;\n    {\n      patchDynamicImport(opts.resourcesUrl, scriptElm);\n    }\n    if (!win.customElements) {\n      // module support, but no custom elements support (Old Edge)\n      // @ts-ignore\n      return import( /* webpackChunkName: \"polyfills-dom\" */'./dom-4061ceba.js').then(() => opts);\n    }\n  }\n  return promiseResolve(opts);\n};\nconst patchDynamicImport = (base, orgScriptElm) => {\n  const importFunctionName = getDynamicImportFunction(NAMESPACE);\n  try {\n    // test if this browser supports dynamic imports\n    // There is a caching issue in V8, that breaks using import() in Function\n    // By generating a random string, we can workaround it\n    // Check https://bugs.chromium.org/p/chromium/issues/detail?id=990810 for more info\n    win[importFunctionName] = new Function('w', `return import(w);//${Math.random()}`);\n  } catch (e) {\n    // this shim is specifically for browsers that do support \"esm\" imports\n    // however, they do NOT support \"dynamic\" imports\n    // basically this code is for old Edge, v18 and below\n    const moduleMap = new Map();\n    win[importFunctionName] = src => {\n      const url = new URL(src, base).href;\n      let mod = moduleMap.get(url);\n      if (!mod) {\n        const script = doc.createElement('script');\n        script.type = 'module';\n        script.crossOrigin = orgScriptElm.crossOrigin;\n        script.src = URL.createObjectURL(new Blob([`import * as m from '${url}'; window.${importFunctionName}.m = m;`], {\n          type: 'application/javascript'\n        }));\n        mod = new Promise(resolve => {\n          script.onload = () => {\n            resolve(win[importFunctionName].m);\n            script.remove();\n          };\n        });\n        moduleMap.set(url, mod);\n        doc.head.appendChild(script);\n      }\n      return mod;\n    };\n  }\n};\nconst globalScripts = appGlobalScript;\nexport { patchEsm as a, globalScripts as g, patchBrowser as p };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}