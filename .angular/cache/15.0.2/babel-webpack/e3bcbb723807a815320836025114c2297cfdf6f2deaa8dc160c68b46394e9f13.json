{"ast":null,"code":"import jwt_decode from \"jwt-decode\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../auth-api/auth-api.service\";\nimport * as i2 from \"@angular/router\";\nexport let RoleGuardService = /*#__PURE__*/(() => {\n  class RoleGuardService {\n    constructor(authApiService, router) {\n      this.authApiService = authApiService;\n      this.router = router;\n    }\n    canActivate(route) {\n      return new Promise(resolve => {\n        this.authApiService.authenticate().subscribe(response => {\n          // Save token\n          localStorage.setItem('token', response.headers.get('authorization'));\n          // Get role from token\n          let token = response.headers.get('authorization');\n          let tokenInfo = jwt_decode(token);\n          let role = tokenInfo['role'];\n          // Navigate\n          if (role == 1) {\n            console.log('navigate to collector portal');\n            this.router.navigate(['collector']);\n          }\n          if (role == 2) {\n            this.router.navigate(['partner']);\n          }\n          // Return\n          resolve(true);\n        }, error => {\n          switch (error.status) {\n            case 401:\n            case 440:\n              console.log('navigate to login');\n              this.router.navigate(['login']);\n              break;\n            case 412:\n              console.log(\"navigate to verify page\");\n              this.router.navigate(['verification']);\n              break;\n            case 451:\n              console.log(\"navigate to agreement page\");\n              this.router.navigate(['agreement']);\n              break;\n          }\n          console.log(error);\n          resolve(false);\n        });\n      });\n    }\n  }\n  RoleGuardService.ɵfac = function RoleGuardService_Factory(t) {\n    return new (t || RoleGuardService)(i0.ɵɵinject(i1.AuthApiService), i0.ɵɵinject(i2.Router));\n  };\n  RoleGuardService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RoleGuardService,\n    factory: RoleGuardService.ɵfac,\n    providedIn: 'root'\n  });\n  return RoleGuardService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}