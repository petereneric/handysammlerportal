{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Validators } from '@angular/forms';\nimport jwt_decode from 'jwt-decode';\nimport { environment } from '../../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"../../../services/conn-api/conn-api.service\";\nexport let ResetPage = /*#__PURE__*/(() => {\n  class ResetPage {\n    constructor(toastController, router, alertController, activatedRoute, fb, connApi) {\n      this.toastController = toastController;\n      this.router = router;\n      this.alertController = alertController;\n      this.activatedRoute = activatedRoute;\n      this.fb = fb;\n      this.connApi = connApi;\n      //Constants\n      this.maxPassword = environment.maxPassword;\n      // Urls\n      this.urlReset = 'password/reset';\n      // Variables\n      this.bSubmitted = false;\n      this.bShowPassword = false;\n      this.token = null;\n      this.role = null;\n      // FormBuilder\n      this.formGroup = this.fb.group({\n        cPassword: ['', [Validators.required, Validators.pattern(environment.patternPassword), Validators.minLength(8)]]\n      });\n    }\n    ngOnInit() {\n      this.activatedRoute.params.subscribe(params => {\n        let exp;\n        if (params.token != null) {\n          this.token = params.token;\n          let tokenInfo = jwt_decode(this.token);\n          this.role = tokenInfo['role'];\n          exp = tokenInfo['exp'];\n          if (this.role == null || exp == null) {\n            this.router.navigate(['app-root']);\n          }\n          // Check if token has expired\n          if (Date.now() / 1000 > exp) {\n            this.alertInvalidToken();\n          }\n        } else {\n          this.router.navigate(['app-root']);\n        }\n      });\n    }\n    get errorControl() {\n      return this.formGroup.controls;\n    }\n    onShow() {\n      this.bShowPassword = !this.bShowPassword;\n    }\n    onSave() {\n      this.bSubmitted = true;\n      // check for invalid input\n      if (!this.formGroup.valid) {\n        this.alertInvalid();\n        return;\n      }\n      // prepare\n      let data = {\n        password: this.formGroup.get('cPassword').value,\n        token: this.token\n      };\n      // send\n      this.connApi.post(this.urlReset, data).subscribe(response => {\n        this.toastSaved();\n        localStorage.removeItem('token');\n        this.router.navigate(['app-root']);\n      }, error => {\n        console.log(error);\n      });\n    }\n    // Password\n    passwordInactive() {\n      return this.formGroup.get('cPassword').value.length == 0;\n    }\n    passwordLength() {\n      return this.formGroup.get('cPassword').value.length >= 8;\n    }\n    passwordBigSmall() {\n      let regex = new RegExp('(?=.*[a-z])(?=.*[A-Z])');\n      return regex.test(this.formGroup.get('cPassword').value);\n    }\n    passwordNumber() {\n      let regex = new RegExp('(?=.*[1-9])');\n      return regex.test(this.formGroup.get('cPassword').value);\n    }\n    passwordExtra() {\n      let regex = new RegExp('(?=.*[§#@$!%*?&<>])');\n      return regex.test(this.formGroup.get('cPassword').value);\n    }\n    // Toasts\n    toastSaved() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const toast = yield this.toastController.create({\n          message: 'Dein Passwort wurde erfolgreich zurückgesetzt.',\n          duration: 4000,\n          cssClass: 'my-toast',\n          position: 'bottom'\n        });\n        yield toast.present();\n      });\n    }\n    alertInvalidToken() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const alert = yield this.alertController.create({\n          cssClass: 'my-alert',\n          header: 'Dieser Link ist ungültig',\n          message: 'Möglicherweise ist der Link abegelaufen, da er nach Zusendung nur eine Stunde lang gültig ist. In diesem Fall kannst du dir einen neuen zusenden lassen.',\n          buttons: [{\n            text: 'Ok',\n            handler: () => {\n              this.router.navigate(['request/role/' + (this.role == 0 ? 1 : 0)]);\n            }\n          }]\n        });\n        yield alert.present();\n      });\n    }\n    alertInvalid() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const alert = yield this.alertController.create({\n          cssClass: 'my-alert',\n          header: 'Ungültiges Passwort',\n          message: 'Bitte ändere dein Passwort, sodass es alle unter dem Passwort stehenden Bedingungen erfüllt.',\n          buttons: ['Ok']\n        });\n        yield alert.present();\n      });\n    }\n  }\n  ResetPage.ɵfac = function ResetPage_Factory(t) {\n    return new (t || ResetPage)(i0.ɵɵdirectiveInject(i1.ToastController), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i1.AlertController), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i3.FormBuilder), i0.ɵɵdirectiveInject(i4.ConnApiService));\n  };\n  ResetPage.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ResetPage,\n    selectors: [[\"app-reset\"]],\n    decls: 36,\n    vars: 8,\n    consts: [[1, \"toolbar-subtitle\"], [1, \"input-background\"], [1, \"block-element-single\"], [3, \"formGroup\"], [1, \"ion-row-center\"], [\"size-xl\", \"8\", \"size-lg\", \"12\", \"size-md\", \"12\", \"size-sm\", \"12\", \"size-xs\", \"12\"], [\"lines\", \"full\", 1, \"ion-item\"], [\"position\", \"floating\", 1, \"input-label\"], [\"formControlName\", \"cPassword\", 3, \"maxlength\", \"type\"], [\"size-lg\", \"3\", \"size-md\", \"6\", \"size-sm\", \"12\", \"size-xs\", \"12\", 1, \"ion-text-center\"], [3, \"ngClass\"], [\"size-xl\", \"4\", \"size-lg\", \"12\", \"size-md\", \"12\", \"size-sm\", \"12\", \"size-xs\", \"12\", 1, \"ion-col-button\"], [1, \"button-four\", 3, \"click\"], [1, \"ion-row-buttons\"], [1, \"ion-button-one-inside\", 3, \"click\"]],\n    template: function ResetPage_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\")(1, \"ion-toolbar\")(2, \"ion-title\");\n        i0.ɵɵtext(3, \"Handysammlerportal \");\n        i0.ɵɵelementStart(4, \"p\", 0);\n        i0.ɵɵtext(5, \"Passwort zur\\u00FCcksetzen\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(6, \"ion-content\", 1)(7, \"ion-grid\")(8, \"div\", 2)(9, \"form\", 3)(10, \"ion-row\", 4)(11, \"ion-col\", 5)(12, \"ion-item\", 6)(13, \"ion-label\", 7);\n        i0.ɵɵtext(14, \"Neues Passwort\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(15, \"ion-input\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"ion-row\")(17, \"ion-col\", 9)(18, \"span\", 10);\n        i0.ɵɵtext(19, \"Mindestens 8 Zeichen\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(20, \"ion-col\", 9)(21, \"span\", 10);\n        i0.ɵɵtext(22, \"Gro\\u00DF- und Kleinbuchstaben\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(23, \"ion-col\", 9)(24, \"span\", 10);\n        i0.ɵɵtext(25, \"Zahl\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(26, \"ion-col\", 9)(27, \"span\", 10);\n        i0.ɵɵtext(28, \"Sonderzeichen\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(29, \"ion-col\", 11)(30, \"ion-button\", 12);\n        i0.ɵɵlistener(\"click\", function ResetPage_Template_ion_button_click_30_listener() {\n          return ctx.onShow();\n        });\n        i0.ɵɵtext(31);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(32, \"ion-row\", 13)(33, \"ion-col\")(34, \"ion-button\", 14);\n        i0.ɵɵlistener(\"click\", function ResetPage_Template_ion_button_click_34_listener() {\n          return ctx.onSave();\n        });\n        i0.ɵɵtext(35, \"Speichern\");\n        i0.ɵɵelementEnd()()()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"formGroup\", ctx.formGroup);\n        i0.ɵɵadvance(6);\n        i0.ɵɵpropertyInterpolate(\"maxlength\", ctx.maxPassword);\n        i0.ɵɵproperty(\"type\", ctx.bShowPassword ? \"text\" : \"password\");\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngClass\", ctx.passwordInactive() && !ctx.bSubmitted ? \"password-inactive\" : ctx.passwordLength() ? \"password-valid\" : \"password-invalid\");\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngClass\", ctx.passwordInactive() && !ctx.bSubmitted ? \"password-inactive\" : ctx.passwordBigSmall() ? \"password-valid\" : \"password-invalid\");\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngClass\", ctx.passwordInactive() && !ctx.bSubmitted ? \"password-inactive\" : ctx.passwordNumber() ? \"password-valid\" : \"password-invalid\");\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngClass\", ctx.passwordInactive() && !ctx.bSubmitted ? \"password-inactive\" : ctx.passwordExtra() ? \"password-valid\" : \"password-invalid\");\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate(ctx.bShowPassword ? \"Passwort nicht anzeigen\" : \"Passwort anzeigen\");\n      }\n    },\n    styles: [\"[_nghost-%COMP%]   .item-interactive.ion-invalid[_ngcontent-%COMP%]{--highlight-background: #FF !important}[_nghost-%COMP%]   .item-interactive.ion-valid[_ngcontent-%COMP%]{--highlight-background: #FF !important}.button-four[_ngcontent-%COMP%]{margin:.5rem 1rem 1rem}\"]\n  });\n  return ResetPage;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}